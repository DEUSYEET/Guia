{"version":3,"sources":["tools.js","components/guidePreview.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["exports","getVidID","url","cleanUrl","replace","trim","includes","split","tools","require","GuidePreview","guide","props","video","videoThumbnail","className","this","image","src","alt","title","author","description","scoreUp","scoreDown","Component","Home","state","guides","fetch","then","res","json","data","setState","console","log","getAll","id","map","key","guideID","App","test","e","homeLinks","to","path","render","Hide","hide","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4JAAAA,EAAQC,SAAW,SAAAC,GACf,IAAIC,EAAWD,EAAIE,QAAQ,WAAW,IAAIC,OAE1C,OAAGF,EAASG,SAAS,YACHH,EAASI,MAAM,KACb,GAEHJ,EAASI,MAAM,OACD,GAAGA,MAAM,KACjB,K,wICPrBC,EAAQC,EAAQ,IA2CPC,E,4MAxCbC,MAAQ,EAAKC,MAAMD,M,EACnBT,IAAM,EAAKS,MAAME,M,EACjBC,eAAkB,EAAKZ,IAAO,8BAAgCM,EAAMP,SAAS,EAAKC,KAAO,SAAY,G,uDAOnG,OACE,yBAAKa,UAAU,iBACXC,KAAKL,MAAMM,OAASD,KAAKd,KACzB,yBAAKa,UAAU,sBACb,yBACEA,UAAU,kBACVG,IAAKF,KAAKF,eACVK,IAAKH,KAAKL,MAAMS,SAIrBJ,KAAKL,MAAMM,OACV,yBAAKF,UAAU,sBACb,yBACEA,UAAU,kBACVG,IAAKF,KAAKL,MAAMM,MAChBE,IAAKH,KAAKL,MAAMS,SAItB,yBAAKL,UAAU,uBACb,yBAAKA,UAAU,qBAAqBC,KAAKL,MAAMS,OAC/C,yBAAKL,UAAU,sBAAsBC,KAAKL,MAAMU,QAAU,aAC1D,yBAAKN,UAAU,oBAAoBC,KAAKL,MAAMW,aAC9C,yBAAKP,UAAU,qBAAf,gBAAuCC,KAAKL,MAAMY,SAAW,EAA7D,kBAAqEP,KAAKL,MAAMa,WAAa,S,GAlC5EC,aCqCZC,E,4MAlCbC,MAAQ,CACNC,OAAQ,I,uDAGA,IAAD,OAEPC,MATM,6EAUHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,EAAKC,SAAS,CACZN,OAAQK,IAEVE,QAAQC,IAAI,EAAKT,MAAMC,a,0CAK3BZ,KAAKqB,W,+BAIL,OACE,yBAAKC,GAAG,YACN,yBAAKA,GAAG,aAAR,mBACA,yBAAKA,GAAG,sBACLtB,KAAKW,MAAMC,OAAOW,KAAI,SAAC5B,GAAD,OACrB,kBAAC,EAAD,CAAcA,MAAOA,EAAO6B,IAAK7B,EAAM8B,mB,GA5BhChB,aCgDJiB,E,4MAzCbf,MAAQ,CACNgB,MAAM,G,mDAGHC,GACH5B,KAAKkB,SAAS,CACZW,WAAW,M,+BAcL,IAAD,OACP,OACE,yBAAKP,GAAG,aACN,yBAAKA,GAAG,eACN,kBAAC,IAAD,CAAMQ,GAAG,KACP,yBAAK5B,IAAI,yBAAyBC,IAAI,OAAOmB,GAAG,eAGpD,yBAAKA,GAAG,iBACN,kBAAC,IAAD,CACES,KAAK,IACLC,OAAQ,SAACpC,GAAD,OACN,kBAAC,EAAD,iBAAUA,EAAV,CAAiBqC,KAAM,SAACL,GAAD,OAAO,EAAKM,KAAKN,gB,GAjCpCnB,aCAE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASR,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFS,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.19016555.chunk.js","sourcesContent":["exports.getVidID = url=> {\r\n    let cleanUrl = url.replace(\"https://\",\"\").trim();\r\n\r\n    if(cleanUrl.includes(\"youtu.be\")){\r\n       let splitUrl = cleanUrl.split(\"/\")\r\n        return(splitUrl[1])\r\n    } else {\r\n      let splitUrl = cleanUrl.split(\"?v=\")\r\n      let cleanSplitUrl = splitUrl[1].split(\"&\");\r\n      return(cleanSplitUrl[0])\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n// import YouTube from \"react-youtube\";\r\nconst tools = require(\"../tools\");\r\n\r\nclass GuidePreview extends Component {\r\n  guide = this.props.guide;\r\n  url = this.guide.video;\r\n  videoThumbnail = (this.url ? (\"https://img.youtube.com/vi/\" + tools.getVidID(this.url) + \"/0.jpg\") : \"\");\r\n\r\n    \r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"guidePreview\">\r\n        {!this.guide.image && this.url && (\r\n          <div className=\"guidePreviewImgBox\">\r\n            <img\r\n              className=\"guidePreviewImg\"\r\n              src={this.videoThumbnail}\r\n              alt={this.guide.title}\r\n            ></img>\r\n          </div>\r\n        )}\r\n        {this.guide.image && (\r\n          <div className=\"guidePreviewImgBox\">\r\n            <img\r\n              className=\"guidePreviewImg\"\r\n              src={this.guide.image}\r\n              alt={this.guide.title}\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"guidePreviewContent\">\r\n          <div className=\"guidePreviewTitle\">{this.guide.title}</div>\r\n          <div className=\"guidePreviewAuthor\">{this.guide.author || \"Anonymous\"}</div>\r\n          <div className=\"guidePreviewDesc\">{this.guide.description}</div>\r\n          <div className=\"guidePreviewScore\"> üëç{this.guide.scoreUp || 0} / üëé{this.guide.scoreDown || 0}</div>\r\n          {/* <YouTube videoId={tools.getVidID(this.url)}></YouTube> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GuidePreview;\r\n","import React, { Component } from \"react\";\r\nimport GuidePreview from \"../components/guidePreview\";\r\n\r\n// let url = \"http://localhost:8080/getAll\";\r\nlet url = \"http://guiabackend-env.eba-u9xxwbnm.us-west-1.elasticbeanstalk.com/getAll\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    guides: [],\r\n  };\r\n\r\n  getAll() {\r\n    // console.log(url)\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // console.log(data);\r\n        this.setState({\r\n          guides: data,\r\n        });\r\n        console.log(this.state.guides);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAll();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"homePage\">\r\n        <div id=\"homeTitle\">Featured Guides</div>\r\n        <div id=\"homeGuideContainer\">\r\n          {this.state.guides.map((guide) => (\r\n            <GuidePreview guide={guide} key={guide.guideID} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import \"./App.scss\";\nimport React, { Component } from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home.jsx\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nclass App extends Component {\n  state = {\n    test: true,\n  };\n\n  hide(e) {\n    this.setState({\n      homeLinks: true,\n    });\n  }\n\n  // //RESET STATE ON BACK\n  // //or on load ... i think?\n  // componentDidMount(){\n  //   window.onpopstate = () =>{\n  //     this.setState({\n  //       test:true\n  //     })\n  //   }\n  // }\n\n  render() {\n    return (\n      <div id=\"container\">\n        <div id=\"mainSidebar\">\n          <Link to=\"/\">\n            <img src=\"./assets/GuiaLogo1.svg\" alt=\"Logo\" id=\"mainLogo\"></img>\n          </Link>\n        </div>\n        <div id=\"mainContainer\">\n          <Route\n            path=\"/\"\n            render={(props) => (\n              <Home {...props} Hide={(e) => this.hide(e)}></Home>\n            )}\n          ></Route>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import { Router } from 'react-router-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}